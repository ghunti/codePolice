#!/bin/bash

#Include utils script
source "$(dirname $(readlink -f $0))/utils.sh"

if ! $CONF_pre_commit_active ; then
    #Hook not active
    exit 0
fi


function main() {
    codeSniffer
    whiteSpace
    debugCode
    internationalization
}

#Check for coding standard errors introduced on this commit
function codeSniffer() {
    if ! $CONF_pre_commit_cs_active ; then
        #Code sniffing not active
        return 0
    fi

    #-r so that read doesn't remove the backslash from line
    while read -r line
    do
        status=$(printf "$line" | cut -f1)
        fileName=$(printf "$line" | sed -re 's/^[A-Z]\s*(.*)/\1/' -e 's/^"(.*)"$/\1/')
        sniffFile "$status" "$fileName"

    done <<< "`git diff --staged --name-status`"
}

#Check for coding standards errors introduced on this commit on a specific file
function sniffFile() {
    local status=$1
    local fileName=$2
    local prvVersion=

    #File was deleted
    if [ "$status" = "D" ]; then
        return 0
    fi

    #File was modified
    if [ "$status" = "M" ]; then
        prvVersion=$(tempfile) || exit 1;
        git show HEAD:"$fileName" > $prvVersion
    fi

    #File was moved
    if [ "$status" = "R" ]; then
        local mvFrom=$(printf "$fileName" | sed -r 's/(.*)\s->\s.*/\1/')
        fileName=$(printf "$fileName" | sed -r 's/.*\s->\s(.*)/\1/')

        prvVersion=$(tempfile) || exit 1;
        git show HEAD:"$mvFrom" > $prvVersion
    fi

    #Store the result of phpcs execution (only the changed lines)
    local phpcsResult=$(tempfile) || exit 1;
    phpcs $CONF_pre_commit_cs_arguments "$fileName" | sed '1,5 d' | sed -n -e :a -e '1,4!{P;N;D;};N;ba' > $phpcsResult

    if [ -n "$prvVersion" ]; then
        #Previous version exist. Check if we introduced new errors

        #An array with the number of the modified lines
        local changedLines=($(getChangedLines $prvVersion $fileName))
        #An array with the number of the current error lines
        local currentErrorLines=($(cat "$phpcsResult" | egrep '([[:digit:]])+[[:blank:]]\|.*$' | 
            sed -r -e 's/^([[:blank:]])*([[:digit:]]+)*.*/\2/' | sort -n | uniq | tr '\n' ' '))

        local errorLines=()
        for line in "${changedLines[@]}"
        do
            isInArray $line "${currentErrorLines[@]}"
            if [ $? = 0 ]; then
                errorLines=("${errorLines[@]}" $line)
            fi
        done

        if  [ ${#errorLines[@]} = 0 ]; then
            #No new errors were introduced
            return 0
        else
            #Errors were introduced
            errorLog=$errorLog"\n$lineSeparator""FILE: "$fileName"\n$lineSeparator"
            for line in "${errorLines[@]}"
            do
                #Append all the new error lines to the error log
                local result=$(cat "$phpcsResult" | egrep "^[[:space:]]$line[[:space:]].*$")
                errorLog="$errorLog""$result\n"
            done
        fi

    else
        #Previous version doesn't exist, just check if new version has errors
        local nErrors=$(cat "$phpcsResult" | wc -l)
        if [ $nErrors = 0 ]; then
            #No new errors were introduced
            return 0
        else
            #Errors were introduced
            errorLog=$errorLog"\n$lineSeparator""FILE: "$fileName"\n$lineSeparator"
            local result=$(cat "$phpcsResult")
            errorLog="$errorLog""$result\n"
        fi
    fi
}

function whiteSpace() {
    if ! $CONF_pre_commit_ws_active ; then
        #White space verification not active
        return 0
    fi

    git diff --staged --check &> /dev/null
    if [ $? != 0 ]; then
        errorLog="$errorLog"$lineSeparator"Whitespace errors:\n"$lineSeparator
        errorLog="$errorLog"$(git diff --staged --check)
    fi
}

#Check if we are about to commit debug code
function debugCode()
{
    if ! $CONF_pre_commit_debug_active ; then
        #Check for debug code is not active
        return 0
    fi

    checkForRegexCodeOnStage $CONF_pre_commit_debug_regex
    if [ -n "$lastCommandResult" ]; then
        errorLog="$errorLog"$lineSeparator"Debug code is about to be commited:\n"$lineSeparator
        errorLog="$errorLog"$lastCommandResult"\n"
    fi
}

#Check if we are about to commit internationalization sentences
function internationalization()
{
    if ! $CONF_pre_commit_internationalization_active ; then
        #Check for internationalization code is not active
        return 0
    fi

    checkForRegexCodeOnStage $CONF_pre_commit_internationalization_regex
    if [ -n "$lastCommandResult" ]; then
        errorLog="$errorLog"$lineSeparator"Internacionalization code has been commited:\n"$lineSeparator
        errorLog="$errorLog"$lastCommandResult"\n"
    fi
}

lineSeparator=$(printf "%$(tput cols)s\n"|tr ' ' '=')
errorLog=

main

if [ -n "$errorLog" ]; then
    printf "$errorLog"
    exit 1
fi
exit 0
