#!/bin/bash

#Include utils script
source "$(dirname $(readlink -f $0))/utils.sh"

if ! $CONF_pre_commit_active ; then
    #Hook not active
    exit 0
fi


function main() {
    codeSniffer
    whiteSpace
    debugCode
}

#Check for coding standard errors introduced on this commit
function codeSniffer() {
    if ! $CONF_pre_commit_cs_active ; then
        #Code sniffing not active
        exit 0
    fi

    #-r so that read doesn't remove the backslash from line
    while read -r line
    do
        status=$(printf "$line" | cut -f1)
        fileName=$(printf "$line" | sed -re 's/^[A-Z]\s*(.*)/\1/' -e 's/^"(.*)"$/\1/')
        sniffFile "$status" "$fileName"

    done <<< "`git diff --staged --name-status`"
}

#Check for coding standards errors introduced on this commit on a specific file
function sniffFile() {
    local status=$1
    local fileName=$2
    local standard=$CONF_pre_commit_cs_standard
    local prvVersion=
    
    if [ "$status" = "D" ]; then
        return 0
    fi

    if [ "$status" = "M" ]; then
        prvVersion=$(tempfile) || exit 1;
        git show HEAD:"$fileName" > $prvVersion
    fi
    
    if [ "$status" = "R" ]; then
        local mvFrom=$(printf "$fileName" | sed -r 's/(.*)\s->\s.*/\1/')
        fileName=$(printf "$fileName" | sed -r 's/.*\s->\s(.*)/\1/')

        prvVersion=$(tempfile) || exit 1;
        git show HEAD:"$mvFrom" > $prvVersion
    fi

    if [ -n "$prvVersion" ]; then
        #Previous version exist. Check if we introduced new errors
        local csPrvFile=$(tempfile)
        phpcs --standard=$standard $prvVersion | sed '1,2 d' > $csPrvFile
        local csCurFile=$(tempfile)
        phpcs --standard=$standard "$fileName" | sed '1,2 d' > $csCurFile

        diff $csPrvFile $csCurFile &> /dev/null
        if [ $? = 0 ]; then
            #No new errors were introduced
            return 0
        else
            #Errors were introduced
            errorLog=$errorLog"$lineSeparator""FILE:"$fileName"\n$lineSeparator"
            local result=$(diff "$csPrvFile" "$csCurFile" -y)
            errorLog="$errorLog""$result\n\n\n"
        fi

    else
        #Previous version doesn't exist, just check if new version has errors
        phpcs --standard=$standard "$fileName" &> /dev/null
        if [ $? = 0 ]; then
            #No new errors were introduced
            return 0
        else
            #Errors were introduced
            errorLog=$errorLog"$lineSeparator""FILE:"$fileName"\n$lineSeparator"
            local result=$(phpcs --standard=$standard "$fileName" | sed '1,2 d')
            errorLog="$errorLog""$result\n\n\n"
        fi
    fi
}

function whiteSpace() {
    if ! $CONF_pre_commit_ws_active ; then
        #White space verification not active
        exit 0
    fi
    
    git diff --staged --check &> /dev/null
    if [ $? != 0 ]; then
        errorLog="$errorLog"$lineSeparator"Whitespace errors:\n"$lineSeparator
        errorLog="$errorLog"$(git diff --staged --check)
    fi
}

#Check if we are about to commit debug code
function debugCode()
{
    if ! $CONF_pre_commit_debug_active ; then
        #Check for debug code is not active
        exit 0
    fi

    OLDIFS=$IFS
    IFS='\n'
    local result=$(git diff --staged | egrep -n "^\+.*(var_dump|die|print_r|exit|console\.log)")
    IFS=$OLDIFS
    if [ -n "$result" ]; then
        errorLog="$errorLog"$lineSeparator"Debug code is about to be commited:\n"$lineSeparator
        errorLog="$errorLog"$result"\n"
    fi
}


lineSeparator=$(printf "%$(tput cols)s\n"|tr ' ' '=')
errorLog=

main

if [ -n "$errorLog" ]; then
    printf "$errorLog"
    exit 1
fi
exit 0
